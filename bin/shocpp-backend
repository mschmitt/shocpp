#!/usr/bin/env bash
set -o errexit

me_path="$(readlink -f "$0")"
me_dir="$(dirname "${me_path}")"
me_base="$(basename "${me_path}")"

# Usually 55, reduce for testing
heartbeatInterval=55

# File contains JSON array with known tags
tagsfile="${SHOCPP_TAGSFILE:-${me_dir}/../conf/tags.json}"

# Directory where accounting information will be written
accountingdir="${SHOCPP_ACCOUNTDINGDIR:-${me_dir}/../accounting}"
[[ -d "${accountingdir}" ]] || mkdir -p "${accountingdir}"

# Misc paths and dirs
logdir="${me_dir}/../log"
[[ -d "${logdir}" ]] || mkdir -p "${logdir}"
rundir="${me_dir}/../run"
[[ -d "${rundir}" ]] || mkdir -p "${rundir}"
cmdfile="${rundir}/cmd.json"
writelock="${rundir}/writelock"
touch "${writelock}"
pidfile="${rundir}/shocpp.pid"
echo "${$}" > "${pidfile}"

function localtime() {
	printf "%(%Y-%m-%d %H:%M:%S)T" -1
}

function writelog() {
	local logprefix="${1}"
	local logmsg="${2}"
	if [[ -t 2 ]]
	then
		# If stderr is a terminal
		printf "%s [%s] %-10s: %s\n" $$ "$(localtime)" "${logprefix}" "${logmsg}" >&2
	fi
	flock "${logdir}/log" printf "%s [%s] %-10s: %s\n" "$(localtime)" $$ "${logprefix}" "${logmsg}" >> "${logdir}/log"
}

function cleanexit(){
	local exitcode=$?
	trap - INT QUIT TERM EXIT
	writelog "Status" "Exiting ${exitcode}"
	exit "${exitcode}"
}
trap cleanexit INT QUIT TERM EXIT

function errorexit() {
	local exitcode=$?
	trap - ERR
	trap - EXIT
	writelog "Errorexit" "Error, exitcode ${exitcode} on line $(caller)"
	exit "${exitcode}"
}
trap errorexit ERR

function returnResult() {
	# Return a result (confirmation) to the charger
	local msgid="${1}"
	local payload="${2}"
	result="$(jq -c -n '[3, $msgid, $payload]' --arg msgid "${msgid}" --argjson payload "${payload}")"
	# Lock for safe interaction with sendRequest
	flock "${writelock}" printf "%s\n" "${result}"
	writelog "Sent" "${result}"
}

function sendCommand() {
	# Send a command to the charger (externally supplied)
	local message
	message="$(cat "${cmdfile}")"
	# Lock for safe interaction with returnResult
	flock "${writelock}" printf "%s\n" "${message}"
	writelog "Sent" "${message}"
}
trap sendCommand USR1

function sendRequest() {
	# Send internal command to the charger
	local call="${1}"
	local payload="${2}"
	printf -v message "[2,\"%s\",\"%s\",%s]" "${RANDOM}" "${call}" "${payload}"
	flock "${writelock}" printf "%s\n" "${message}"
	writelog "Sent" "${message}"
}

function datetime() {
	TZ=UTC printf "%(%Y-%m-%dT%H:%M:%S.000Z)T" -1
}

function transIdFromIdIndexAndMeterStart() {
	# Persist idtoken and meter start information in the transaction id
	# Transaction id is signed 32 bit int, max 2 147 483 647
	# Place the idtoken internal index in the upper 3 digits (max. 214 or so)
	# Place the meter start value in the lower 7 digits
	local idindex="${1}"
	local meterstart_wh="${2}"
	local meterstart_kwh=$(( meterstart_wh / 1000 ))
	local upper=$(( idindex * 10000000 ))
	local tid=$(( upper + meterstart_kwh))
	echo "${tid}"
}

function consumptionFromTransId() {
	# Transaction is done, assemble all relevant data for it
	local tid="${1}"
	local meterstop_kwh="${2}"
	# Remember:
	# - tid % 10000000 = meter reading at start
	# - int(tid / 10000000) = idtoken index from tokens.json (bash only maths int)
	local meterstart_kwh=$(( tid % 10000000))
	local indexcomponent=$(( tid - meterstart_kwh ))
	local idindex=$(( indexcomponent / 10000000 ))
	writelog "Status" "Transaction ${tid} split into idindex ${idindex} and meterstart_kwh ${meterstart_kwh}"
	local idtag
	idaccount="$(jq -e -r '.[] | select (.index == $i) | .account' --argjson i "${idindex}" < "${tagsfile}")"
	local consumed_kwh=$(( meterstop_kwh - meterstart_kwh ))
	jq -c -n '{"localtime": $l, "unixtime": $t, "account": $a, "begin_kwh": $b, "end_kwh": $e, "consumed_kwh": $c}' \
		--arg l "$(localtime)" --arg t "$(date +%s)" \
		--arg a "${idaccount}" --arg b "${meterstart_kwh}" --arg e "${meterstop_kwh}" --arg c "${consumed_kwh}"
}

# Check for misc. dependencies
for dep in jq
do
	if ! type "${dep}" >/dev/null
	then
		writelog "ERROR" "Dependency missing: ${dep}"
		depsmissing=1
	fi
done
[[ -v depsmissing ]] && exit

writelog "Status" "Connection from ${REMOTE_ADDR}, process id is ${$}."
tagsfile="$(readlink -f "${tagsfile}")"
if jq -e . < "${tagsfile}" >/dev/null 2>&1
then
	writelog "Status" "${tagsfile} is valid JSON."
else
	writelog "ERROR" "${tagsfile} is NOT valid JSON. Exiting."
	exit
fi

while read -r received
do
	writelog "Received" "${received}"
	unset msgtype msgid call payload authresult idtag idindex
	# ocpp-j-1.6-specification.pdf describes the message format
	# Field 0, Message type:
	#   Type 2: Request
	#   Type 3: Confirmation
	msgtype="$(jq -r '.[0]' <<< "${received}")"
	# Field 1, unique request ID:
	msgid="$(jq -r '.[1]' <<< "${received}")"
	# Identify call ID and payload
	if [[ ${msgtype} -eq 2 ]]
	then
		# Request from charger, call in field 2, payload in field 3
		call="$(jq -r '.[2]' <<< "${received}")"
		payload="$(jq '.[3]' <<< "${received}")"
	else 
		# Confirmation from charger (to a request of ours), no call id, payload in field 2
		call='none'
		payload="$(jq '.[2]' <<< "${received}")"
	fi
	# If there's an idTag field in the payload, figure out if it's authorized
	authresult='Rejected'
	if idtag="$(jq -e -r '.idTag' <<< "${payload}")"
	then
		if account="$(jq -e -r '.[] | select (.ids[] == $got_id) | .account' --arg got_id "${idtag}" < "${tagsfile}")"
		then
			authresult='Accepted'
			idindex="$(jq -e -r '.[] | select (.ids[] == $got_id) | .index' --arg got_id "${idtag}" < "${tagsfile}")"
			writelog "Early-Auth" "Will accept (RF)ID tag ${idtag} (account=${account}, index=${idindex})."
		else
			writelog "Early-Auth" "Will reject (RF)ID tag ${idtag}."
		fi
	fi
	case "${call}" in
		"BootNotification")
			writelog "Status" "Handling BootNotification"
			# Always accept with the required fields
			returnResult "${msgid}" "{\"currentTime\": \"$(datetime)\", \"interval\": ${heartbeatInterval}, \"status\": \"Accepted\"}"
			;;
		"StatusNotification")
			writelog "Status" "Handling StatusNotification"
			# Always respond with empty payload
			returnResult "${msgid}" "{}"
			;;
		"Heartbeat")
			writelog "Status" "Handling Heartbeat"
			# Always respond with timestamp
			returnResult "${msgid}" "{\"currentTime\": \"$(datetime)\"}"
			;;
		"Authorize")
			writelog "Status" "Handling Authorize"
			# Accept or reject with result from early-auth
			returnResult "${msgid}" "{\"idTagInfo\": {\"status\": \"$authresult\"}}"
			;;
		"StartTransaction")
			writelog "Status" "Handling StartTransaction"
			# Keep track of start parameters
			unset meterstart timestamp tid
			meterstart="$(jq -r '.meterStart' <<< "${payload}")"
			timestamp="$(jq -r '.timestamp' <<< "${payload}")"
			tid="$(transIdFromIdIndexAndMeterStart "${idindex}" "${meterstart}")"
			writelog "Status" "Transaction ID: ${tid}"
			# Accept or reject with result from early-auth, return transaction ID
			returnResult "${msgid}" "{\"idTagInfo\": {\"status\": \"${authresult}\"}, \"transactionId\": ${tid}}"
			;;
		"StopTransaction")
			writelog "Status" "Handling StopTransaction"
			# Extract final transaction parameters for accounting
			unset meterstop timestamp tid accountingdata
			meterstop="$(jq -r '.meterStop' <<< "${payload}")"
			timestamp="$(jq -r '.timestamp' <<< "${payload}")"
			tid="$(jq -r '.transactionId' <<< "${payload}")"
			returnResult "${msgid}" "{}"
			accountingdata="$(consumptionFromTransId "${tid}" "$(( meterstop / 1000 ))")"
			writelog "Accounting" "${accountingdata}"
			# Todo: Persist and report
			# Derive deep accounting dir from year and month
			printf -v monthdir "%s/%(%Y)T/%(%m)T/" "${accountingdir}" -1 -1
			printf -v accountfile "%(%s)T-%0.4x.json" -1 "${RANDOM}"
			mkdir -p "${monthdir}"
			echo "${accountingdata}" > "${monthdir}/${accountfile}"
			writelog "Accounting" "Written to $(readlink -f "${monthdir}/${accountfile}")"
			;;
		"none")
			: #writelog "Status" "Ignoring confirmation from charger"
			;;
		*)
			writelog "Unknown:" "${call}"
			;;
	esac
done
